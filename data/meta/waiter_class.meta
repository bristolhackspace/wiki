a:2:{s:7:"current";a:8:{s:4:"date";a:2:{s:7:"created";i:1397827033;s:8:"modified";i:1397827033;}s:7:"creator";s:9:"Patrick N";s:4:"user";s:7:"patrick";s:11:"last_change";a:7:{s:4:"date";i:1397827033;s:2:"ip";s:12:"77.99.57.235";s:4:"type";s:1:"C";s:2:"id";s:12:"waiter_class";s:4:"user";s:7:"patrick";s:3:"sum";s:7:"created";s:5:"extra";s:0:"";}s:5:"title";s:12:"Waiter class";s:11:"description";a:2:{s:15:"tableofcontents";a:1:{i:0;a:4:{s:3:"hid";s:12:"waiter_class";s:5:"title";s:12:"Waiter class";s:4:"type";s:2:"ul";s:5:"level";i:1;}}s:8:"abstract";s:503:"This class lets you do a non-blocking delay (so the Arduino can continue to execute other code)


typedef uint32_t clock_t;
const clock_t INFINITE = ( (clock_t)(-1) );
const clock_t SEC = 1000;

//
// waiter: returns true and resets if more than time has passed
//
class waiter {
    clock_t last;
public:
    waiter() : last(millis()) {}
    bool wait( const clock_t time ) {
        clock_t now = millis();
        if( now - last >= time ) {
            last = now;
            return true;
       â€¦";}s:8:"internal";a:2:{s:5:"cache";b:1;s:3:"toc";b:1;}s:8:"relation";a:1:{s:10:"firstimage";s:0:"";}}s:10:"persistent";a:4:{s:4:"date";a:1:{s:7:"created";i:1397827033;}s:7:"creator";s:9:"Patrick N";s:4:"user";s:7:"patrick";s:11:"last_change";a:7:{s:4:"date";i:1397827033;s:2:"ip";s:12:"77.99.57.235";s:4:"type";s:1:"C";s:2:"id";s:12:"waiter_class";s:4:"user";s:7:"patrick";s:3:"sum";s:7:"created";s:5:"extra";s:0:"";}}}